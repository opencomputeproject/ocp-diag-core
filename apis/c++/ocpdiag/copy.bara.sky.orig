"""Defines OCPDiag team Copybara workflows for syncing with GoB source.


There are three primary slices of this codebase with workflows.

1. A private mirror of the bulk of the repository to the ocpdiag Git-on-Borg
   repository. The contents are the entire codebase that can be built externally,
   and this workflow (and the resulting repository) are tested as part of g3
   presubmit. On submit, the changes are pushed to Git-on-Borg.
2. The core libraries that are housed in third_party/ocpdiag/core. These are
   mirrored to the OpenComputeProject github
   (https://github.com/opencomputeproject/ocp-diag-core) as "OCPDiag". This
   workflow is  not part of any presubmit. Pushes are on-demand.
3. Shared source diagnostics. This workflow only includes diagnostics we wish
   to share along with common libraries, but **not** the core library, which is
   imported as part of the build, pointing to the OCP repo.


There are some rules common to all of these workflows, and some separate to each.
Files and transformations associated with each workflow are prefixed gob_ for
git-on-borg target, core_ for the OCP core target, and diags_ for the
pure diagnostics target.
"""

load(
    "//devtools/copybara/library/scrubbing",
    "build_scrub",
    "cc_scrub",
    "doc_scrub",
    "message_keep_tag_text",
    "proto_scrub",
    "py_scrub",
)
load("//devtools/copybara/library/workflow", "piper_sot_to_gerrit", "piper_sot_to_github")
load("//platforms/servers/optionality/lib/copybara/common_scrubbers", "scrubbers")

allowed_authors = {
    "alundin": "Alan Lundin <alundin@google.com>",
    "arvindvis": "Arvind Viswanathan <arvindvis@google.com>",
    "ronyweng": "Rony Weng <ronyweng@google.com>",
    "troywang": "Troy Wang <troywang@google.com>",
    "yuanlinw": "Yuanlin Wen <yuanlinw@google.com>",
}

default_author = "OCPDiag Team <ocpdiag-core-team@google.com>"

github_files = glob(
    include = [
        "apis/ocpdiag/**",
        "LICENSE",
        "CONTRIBUTING.md",
    ],
)

# Every file that will show up in GoB repo somewhere
gob_files_to_move = glob(
    include = [
        "google3/third_party/ocpdiag/**",
    ],
    exclude = [
        # google3 files.
        "google3/third_party/ocpdiag/**blueprint",
        "google3/third_party/ocpdiag/g3doc/**",
        "google3/third_party/ocpdiag/copy.bara.sky",
        "google3/third_party/ocpdiag/**METADATA",
        "google3/third_party/ocpdiag/**OWNERS",
        "google3/third_party/ocpdiag/**.go",
        "google3/third_party/ocpdiag/diagnostics/nic/**",
        "google3/third_party/ocpdiag/core/results/go/**",
        "google3/third_party/ocpdiag/leakr.dict",
        "google3/third_party/ocpdiag/bazel/BUILD",
        "google3/third_party/ocpdiag/reviews.gwsq",

        # All diags are opt-in, and should be included
        # in the diags_files_to_move list below
        "google3/third_party/ocpdiag/diagnostics/networking/**",
        "google3/third_party/ocpdiag/servers/**",
        "google3/third_party/ocpdiag/storage/**",
        "google3/third_party/ocpdiag/diagnostics/system/reboot/**",
        "google3/third_party/ocpdiag/diagnostics/servers/**",
        "google3/third_party/ocpdiag/diagnostics/software/**",
        "google3/third_party/ocpdiag/diagnostics/storage/**",
        "google3/third_party/ocpdiag/diagnostics/system/**",
        "google3/third_party/ocpdiag/diagnostics/accelerators/**",
        "google3/third_party/ocpdiag/core/examples/simple/go/**",

        # Backend excludes
        "google3/third_party/ocpdiag/core/hwinterface/backends/gsys/lib/gsys_rpc_test.cc",
        "google3/third_party/ocpdiag/core/hwinterface/backends/mimik/**",
        "google3/third_party/ocpdiag/core/hwinterface/backends/sushid/**",
        "google3/third_party/ocpdiag/core/hwinterface/backends/redfish/ocpdiag-dev.**",
        "google3/third_party/ocpdiag/core/hwinterface/backends/redfish/testdata/get_eeprom_info/**",
        "google3/third_party/ocpdiag/core/hwinterface/backends/machine_manager/**",

        # Custom Google3 hardware identifiers are not included
        "google3/third_party/ocpdiag/diagnostics/lib/hardware_identifier/**",

        # ocpdiag blueprint template files should not be shared
        "google3/third_party/ocpdiag/cbtr/**",

        #
        "google3/third_party/ocpdiag/core/results/result_viewer/**",

        # excludes internal data for host backends GetMemoryInfo
        "google3/third_party/ocpdiag/core/hwinterface/backends/host/memory_mapping/**",
    ],
)

# Every file that will show up in the github repo
github_files_to_move = glob(
    include = [
        "google3/third_party/ocpdiag/**",
    ],
    exclude = [
        # google3 files.
        "google3/third_party/ocpdiag/**blueprint",
        "google3/third_party/ocpdiag/g3doc/**",
        "google3/third_party/ocpdiag/copy.bara.sky",
        "google3/third_party/ocpdiag/**METADATA",
        "google3/third_party/ocpdiag/**OWNERS",
        "google3/third_party/ocpdiag/**.go",
        "google3/third_party/ocpdiag/diagnostics/nic/**",
        "google3/third_party/ocpdiag/core/results/go/**",
        "google3/third_party/ocpdiag/diagnostics/lib/testhelper/g3doc/**",
        "google3/third_party/ocpdiag/leakr.dict",
        "google3/third_party/ocpdiag/toolchain**",
        "google3/third_party/ocpdiag/bazel/BUILD",
        "google3/third_party/ocpdiag/reviews.gwsq",

        # GitHub repo contains only OCPDiag core, not diags
        "google3/third_party/ocpdiag/diagnostics/**",
        "google3/third_party/ocpdiag/diagnostics/networking/**",
        "google3/third_party/ocpdiag/core/examples/simple/go/**",

        # Remove libs associated with diags, not core.
        "google3/third_party/ocpdiag/diagnostics/lib/dut_config/**",
        "google3/third_party/ocpdiag/diagnostics/lib/freqset/**",
        "google3/third_party/ocpdiag/diagnostics/lib/gsys/**",
        "google3/third_party/ocpdiag/core/testing/gsysutils/**",
        "google3/third_party/ocpdiag/diagnostics/lib/host_info/**",
        "google3/third_party/ocpdiag/diagnostics/lib/python",
        "google3/third_party/ocpdiag/diagnostics/lib/testhelper",

        # Features not ready for release
        "google3/third_party/ocpdiag/core/hwinterface/*",
        "google3/third_party/ocpdiag/core/hwinterface/lib/**",
        "google3/third_party/ocpdiag/core/hwinterface/backends/**",
        "google3/third_party/ocpdiag/core/hwinterface/cli/**",
        "google3/third_party/ocpdiag/core/hwinterface/client/**",
        "google3/third_party/ocpdiag/core/examples/monitor/**",

        # ocpdiag blueprint template files should not be shared
        "google3/third_party/ocpdiag/cbtr/**",

        # no kokoro setup right now for github
        "google3/third_party/ocpdiag/kokoro/**",

        #
        "google3/third_party/ocpdiag/core/results/result_viewer/**",

        # excludes internal data for host backends GetMemoryInfo
        "google3/third_party/ocpdiag/core/hwinterface/backends/host/memory_mapping/**",
    ],
)

core_readme_files = glob(
    include = [
        # OCPDiag introduction documents
        "google3/third_party/ocpdiag/g3doc/index.md",
        "google3/third_party/ocpdiag/g3doc/parameter.md",
        "google3/third_party/ocpdiag/g3doc/results.md",
        "google3/third_party/ocpdiag/g3doc/results_reference_api.md",
        "google3/third_party/ocpdiag/g3doc/hardware_interface.md",
        "google3/third_party/ocpdiag/g3doc/parameter_help_flag.png",
        "google3/third_party/ocpdiag/g3doc/parameter_recipe.png",
        "google3/third_party/ocpdiag/g3doc/mlc_steps.png",
        "google3/third_party/ocpdiag/g3doc/test_run.png",
        "google3/third_party/ocpdiag/g3doc/test_step.png",
        "google3/third_party/ocpdiag/g3doc/diagnosis.png",
        "google3/third_party/ocpdiag/g3doc/error.png",
        "google3/third_party/ocpdiag/g3doc/measurement.png",
        "google3/third_party/ocpdiag/g3doc/measurement_series.png",
        "google3/third_party/ocpdiag/g3doc/results_api_classes.png",
        "google3/third_party/ocpdiag/g3doc/results_api_hw_record.png",
        "google3/third_party/ocpdiag/g3doc/ocpdiag_workflow.png",
        "google3/third_party/ocpdiag/g3doc/hardware_abstraction_layer.png",
    ],
)

diag_readme_files = glob(
    include = [
        "google3/third_party/ocpdiag/diagnostics/servers/amd_cpu_power_virus/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/servers/buscheck/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/servers/cpucheckerburnin/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/servers/cpu_functional/g3doc/README.md",
        "google3/third_party/ocpdiag/diagnostics/servers/dimmintegrity/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/servers/dna/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/servers/fan_speed/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/servers/imunch/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/servers/intel_cpu_power_virus/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/servers/intel_mlc/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/servers/orizuru_check/g3doc/README.md",
        "google3/third_party/ocpdiag/diagnostics/servers/maxcorestim/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/servers/memtester/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/servers/rainbow/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/servers/sandstone/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/servers/sat/g3doc/README.md",
        "google3/third_party/ocpdiag/diagnostics/servers/silifuzz/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/servers/verify_frus/g3doc/README.md",
        "google3/third_party/ocpdiag/diagnostics/storage/cssd_simple_io/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/storage/disk_consistency/g3doc/README.md",
        "google3/third_party/ocpdiag/diagnostics/servers/cpuintegrity/g3doc/README.md",
        "google3/third_party/ocpdiag/diagnostics/system/bom_check/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/system/sensor_monitor/g3doc/README.md",
        "google3/third_party/ocpdiag/diagnostics/system/sensor_monitor/params.proto",
        "google3/third_party/ocpdiag/diagnostics/servers/tsl/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/servers/test0008/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/servers/biosintegrity/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/servers/bmcintegrity/g3doc/index.md",
        "google3/third_party/ocpdiag/diagnostics/software/hwinterface_smoketest/g3doc/index.md",
    ],
)

shared_source_g3doc_files = glob(
    include = [
        "google3/third_party/ocpdiag/system/error_monitor/g3doc/README.md",
    ],
)

# We keep a separate list of diags that are ready for Git-on-Borg from
# diags that are ready for a public git repo.
gob_diag_files_to_move = glob(
    include = [
        "google3/third_party/ocpdiag/diagnostics/servers/cpuintegrity/**",
        "google3/third_party/ocpdiag/diagnostics/servers/rootoftrustmap/**",
        "google3/third_party/ocpdiag/diagnostics/software/hwinterface_smoketest/**",
        "google3/third_party/ocpdiag/diagnostics/system/error_monitor/**",
        "google3/third_party/ocpdiag/diagnostics/system/firmware_update/**",
        "google3/third_party/ocpdiag/diagnostics/system/reboot/**",
    ],
    exclude = [
        # excludes google3 diags files added by above include
        "google3/third_party/ocpdiag/diagnostics/**METADATA",
        "google3/third_party/ocpdiag/diagnostics/**OWNERS",
        "google3/third_party/ocpdiag/diagnostics/**blueprint",

        # excludes internal params defaults file
        "google3/third_party/ocpdiag/diagnostics/**prod**.json",
    ],
)

diags_files_to_move = glob(
    include = [
        "google3/third_party/ocpdiag/diagnostics/diags.WORKSPACE",
        "google3/third_party/ocpdiag/diagnostics/system/error_monitor/**",
        "google3/third_party/ocpdiag/diagnostics/diags.bazelrc",
        "google3/third_party/ocpdiag/diagnostics/lib/host_info**",
        "google3/third_party/ocpdiag/opensource_only/**",
    ],
    exclude = [
        "google3/third_party/ocpdiag/diagnostics/system/error_monitor/memory_controller_error_step**",
    ],
)

gob_readme_files = core_readme_files + diag_readme_files + shared_source_g3doc_files

# Files that will be in the top-level directory. All others will go in
# the ocpdiag subdirectory.
gob_top_level_files = [
    "LICENSE",
    "README.md",
    "WORKSPACE",
    "external/**",
    "kokoro/**",
    "third_party/**",
    "toolchain/**",
]

# Github has a different structure where many of the top level files
# and folders are moved to the apis subdirectory.
github_api_files = glob(
    include = ["**"],
    exclude = [
        "CONTRIBUTING.md",
        "LICENSE",
    ],
)

# Different file types
cc_files = [
    "**.h",
    "**.cc",
]
python_files = [
    "**.py",
    "**.pyi",
]
bazel_files = [
    "**BUILD",
    "**.bzl",
]
proto_files = [
    "**.proto",
]
readme_files = [
    "**.md",
]

def simple_path_replace(before, after, files):
    """Applies a core.replace to the given files"""
    return core.replace(
        before = before,
        after = after,
        paths = glob(files),
    )

def remove_build_rule(rule):
    """Uses buildozer to delete a BUILD rule"""
    return buildozer.delete(
        target = rule,
    )

def remove_build_rule_type(rule_type):
    """Remove all rules of this type from all BUILD files"""
    return remove_build_rule("...:%" + rule_type)

def _create_empty_build_file(ctx):
    path = ctx.new_path(ctx.params["path"])
    ctx.write_path(path, "")

def create_empty_build_file(path):
    """Creates an empty BUILD file in the specified location"""
    return core.dynamic_transform(
        impl = _create_empty_build_file,
        params = {"path": path},
    )

core_doc_move_transformations = [
    # Move g3doc/index.md to the top level folder.
    core.move(
        before = "google3/third_party/ocpdiag/g3doc/index.md",
        after = "README.md",
    ),
]

# File and folder shuffling and path-changing.
core_move_transformations = [
    # Move top-level files to top-level.
    core.move(
        before = "google3/third_party/ocpdiag",
        after = "",
        paths = glob(gob_top_level_files),
    ),
    # Move all other files to the "ocpdiag" subdirectory.
    core.move(
        before = "google3/third_party/ocpdiag",
        after = "ocpdiag",
        paths = glob(["**"], exclude = gob_top_level_files),
    ),
    # Put bazelrc in right place, and hide it with . prefix.
    core.move(
        before = "ocpdiag/bazel/bazelrc",
        after = ".bazelrc",
    ),
    # Put build_deps and extra_build_deps at ocpdiag level.
    core.move(
        before = "ocpdiag/bazel",
        after = "ocpdiag",
    ),
    core.move(
        before = "ocpdiag/opensource_only",
        after = "",
    ),
]

diags_move_transformations = [
    core.move(
        before = "google3/third_party/ocpdiag",
        after = "",
        paths = glob(["**"]),
    ),
    # Put bazelrc in right place, and hide it with . prefix.
    core.move(
        before = "diagnostics/diags.bazelrc",
        after = ".bazelrc",
    ),
    core.move(
        before = "opensource_only",
        after = "",
    ),
    core.move(
        before = "diagnostics/diags.WORKSPACE",
        after = "WORKSPACE",
    ),
]

gob_move_transformations = [
    core.move(
        before = "ocpdiag/core/hwinterface/backends/host/testdata/${test_case}/${x}_no_google.${y}",
        after = "ocpdiag/core/hwinterface/backends/host/testdata/${test_case}/${x}.${y}",
        regex_groups = {"test_case": ".*", "x": ".*", "y": ".*"},
        overwrite = True,
    ),
]

common_g3doc_replace_transformations = [
    core.replace(
        before = "TODO(b/${bug_id}): ${comment}",
        after = "",
        regex_groups = {
            "bug_id": "[0-9]+",
            "comment": "[\\w\\W]+",
        },
        paths = glob(readme_files),
    ),
    core.replace(
        before = "(/third_party/ocpdiag/g3doc/index.md${headings})",
        after = "(/ocpdiag/${headings})",
        regex_groups = {
            "headings": ".*?",
        },
        paths = glob(readme_files),
    ),
    core.replace(
        before = "(/third_party/ocpdiag/g3doc/${file_name}.${suffix})",
        after = "(/ocpdiag/g3doc/${file_name}.${suffix})",
        regex_groups = {
            "file_name": ".*?",
            "suffix": "md|png",
        },
        paths = glob(gob_top_level_files) + glob(readme_files),
    ),
    core.replace(
        before = "https://source.corp.google.com/piper///depot/google3/third_party/ocpdiag/${filenames}",
        after = "/ocpdiag/${filenames}",
        regex_groups = {
            "filenames": ".*?",
        },
        paths = glob(readme_files),
    ),
    core.replace(
        before = "{.leaf-numbered}",
        after = "",
        paths = glob(readme_files),
    ),
]

github_g3doc_replace_transformations = [
    core.replace(
        before = "[TOC]",
        after = "",
        paths = glob(readme_files),
    ),
    core.replace(
        before = "${email}",
        after = "ocp-test-validation@OCP-All.groups.io",
        paths = glob(readme_files),
        regex_groups = {
            "email": "ocpdiag-core-team[\\w]*@google.com",
        },
    ),
]

# Text-based transformations.
common_replace_transformations = [
    build_scrub(),
    cc_scrub(),
    doc_scrub(),
    proto_scrub(),
    py_scrub(),
    # Remove entire blocks - code that won't be run externally.
    core.replace(
        before = "${internal}",
        after = "",
        regex_groups = {
        },
        multiline = True,
    ),
    # Transform the header guards.
    core.replace(
        before = "THIRD_PARTY_OCPDIAG_${suffix}",
        after = "OCPDIAG_${suffix}",
        regex_groups = {"suffix": "\\w+_H_"},
    ),

    # Transform C++ include paths.
    simple_path_replace("google3/third_party/ocpdiag/", "ocpdiag/", cc_files + python_files),
    simple_path_replace("third_party/ocpdiag/", "ocpdiag/", cc_files + proto_files),
    simple_path_replace("third_party/absl/", "absl/", cc_files),
    simple_path_replace("\"testing/base/public/gunit.h\"", "\"gtest/gtest.h\"", cc_files),
    simple_path_replace("\"testing/base/public/gmock.h\"", "\"gmock/gmock.h\"", cc_files),
    simple_path_replace("net/grpc/public/include/", "", cc_files),
    simple_path_replace("net/proto2/public", "google/protobuf", cc_files),
    simple_path_replace("net/proto2/io/public", "google/protobuf/io", cc_files),
    simple_path_replace("net/proto2/util/public", "google/protobuf/util", cc_files),
    simple_path_replace("net/proto2/proto/", "google/protobuf/", cc_files),
    simple_path_replace("third_party/pybind11_abseil", "pybind11_abseil", cc_files),
    simple_path_replace("third_party/pybind11_protobuf", "pybind11_protobuf", cc_files),
    simple_path_replace("third_party/riegeli/", "riegeli/", cc_files),
    # Transform proto import paths.
    simple_path_replace("net/proto2/proto/", "google/protobuf/", proto_files),

    # Change proto package names and references.
    simple_path_replace("third_party.ocpdiag", "ocpdiag", proto_files),
    simple_path_replace("third_party::ocpdiag::", "ocpdiag::", cc_files),

    # Python
    simple_path_replace("import google3", "", python_files),
    simple_path_replace("from google3.third_party.ocpdiag", "from ocpdiag", python_files),
    simple_path_replace("from google3.third_party.pybind11_abseil import status", "from third_party.pybind11_abseil import status", python_files),
    simple_path_replace("from google3.third_party.pybind11_abseil.status", "from pybind11_abseil.status", python_files),
    simple_path_replace("from google3.net.proto2.python.public", "from google.protobuf", python_files),
    simple_path_replace("from google3.google.protobuf", "from google.protobuf", python_files),
    simple_path_replace("from google3.testing.pybase import googletest", "import unittest", python_files),
    simple_path_replace("from google3.testing.pybase import parameterized", "from absl.testing import parameterized", python_files),
    # This handles mock.patch calls as well.
    simple_path_replace("google3.third_party.ocpdiag", "ocpdiag", python_files),
    simple_path_replace("googletest", "unittest", python_files),
    # Bazel changes
    simple_path_replace("//third_party/bazel_rules/rules_pkg/pkg:", "@rules_pkg//:", bazel_files),
    simple_path_replace("//third_party/bazel_skylib/", "@bazel_skylib//", bazel_files),
    # Visibility changes.
    core.replace(
        before = "default_visibility = [${vis}]",
        after = " default_visibility = [\"//visibility:public\"]",
        regex_groups = {"vis": "[\\w\\W]*?"},
        multiline = True,
        paths = glob(bazel_files),
    ),

    # ocpdiag_test_pkg json_defaults change.
    core.replace(
        before = "json_defaults${characters}\"//third_party/ocpdiag/${path}.json",
        after = "json_defaults${characters}\"//ocpdiag/${path}.json",
        paths = glob(bazel_files),
        regex_groups = {
            "characters": ".*?",
            "path": ".*?",
        },
    ),
    # ocpdiag_test_pkg params_proto change.
    core.replace(
        before = "params_proto${characters}\"//third_party/ocpdiag/${path}_proto",
        after = "params_proto${characters}\"//ocpdiag/${path}_proto",
        paths = glob(bazel_files),
        regex_groups = {
            "characters": ".*?",
            "path": ".*?",
        },
    ),

    # Remove internal proto API stuff.
    core.replace(
        before = "option go_api_flag = \"OPEN_TO_OPAQUE_HYBRID\";  //
        after = "",
        paths = glob(proto_files),
        multiline = True,
    ),
    core.replace(
        before = "option cc_api_version = ${ver};\n",
        after = "",
        regex_groups = {
            "ver": "[2,3]",
        },
        paths = glob(proto_files),
        multiline = True,
    ),
    core.replace(
        before = "proto2.FileOptions",
        after = "google.protobuf.FileOptions",
        paths = glob(proto_files),
    ),

    # Remove MPM and rapid CBTR rules
    remove_build_rule_type("genmpm"),
    remove_build_rule_type("diags_mtest_guitar_workflow_group"),
    # Load bzl_library.
    buildozer.modify(
        target = "...:*",
        commands = [
            "substitute_load //tools/build_defs/testing:(.*) @bazel_skylib//:$1",
        ],
    ),
    # Buildozer BUILD file changes that apply to all files.
    buildozer.modify(
        target = "...:*",
        commands = [
            # Not in bazel
            "remove cc_api_version",
            "remove api_version",
            "remove strict_deps",
            # These are just //google/protobuf, and existing imports should
            # already capture that dependency.
            "remove deps //google/protobuf:any_cc_proto",
            "remove deps //google/protobuf:empty_cc_proto",
            "remove deps //google/protobuf:struct_cc_proto",
            "remove deps //google/protobuf:timestamp_cc_proto",
            "remove deps //google/protobuf:type_cc_proto",
            # Python dep removal
            "remove deps //testing/pybase",
            "remove deps //testing/pybase:basetest",
            "remove deps //third_party/py/mock",
            "remove deps //net/grpc/python:local_credentials",
            "remove deps //net/proto2/python/public:use_pure_python",
            # GSYS
            "remove deps //platforms/gsys/shared:gsys",
            "remove deps //platforms/gsys/shared:status_code",
            # RPC removals
            "remove deps //net/rpc",
            "remove deps //net/rpc2",
            "remove deps //net/rpc:serverstatus_cc_proto",
            "remove deps //net/rpc:serverstatus_cc_stubby",
            "remove deps //net/rpc/testing/public:servicemocker",
            # Remove custom Google hacks
            "remove deps //third_party/ocpdiag/diagnostics/lib/hardware_identifier",
            # //base has initgoogle, this is the replacement dependency
            "substitute * //base @com_google_absl//absl/flags:parse",
            # Third party path substitutions.
            "substitute * //third_party/py/absl/(.*) @com_google_absl_py//absl/${1}",
            "substitute * //third_party/py/absl:(.*) @com_google_absl_py//absl:${1}",
            "substitute * //third_party/absl/(.*) @com_google_absl//absl/${1}",
            "substitute * //third_party/ocpdiag([:/].*) //ocpdiag${1}",
            "substitute * //third_party/py/six @six_archive//:six",
            "substitute * //third_party/riegeli/(.*) @com_google_riegeli//riegeli/${1}",
            # python changes
            "substitute * //net/grpc/python:grpc @com_github_grpc_grpc//src/python/grpcio/grpc:grpcio",
            "substitute * //platforms/gsys/proto:(.*) //ocpdiag/core/hwinterface/backends/gsys/lib/proto:${1}",
            "substitute * //testing/pybase:parameterized @com_google_absl_py//absl/testing:parameterized",
            # pybind changes
            "substitute * //third_party/pybind11_protobuf:(.*) @pybind11_protobuf//pybind11_protobuf:${1}",
            "substitute * //third_party/pybind11_abseil:absl_casters @pybind11_abseil//pybind11_abseil:absl_casters",
            "substitute * //third_party/pybind11_abseil:status_casters @pybind11_abseil//pybind11_abseil:status_casters",
            # gtest substitutions
            "substitute * //testing/base/public:gunit_main @com_google_googletest//:gtest_main",
            "substitute * //testing/base/public:gunit_main_no_heapcheck @com_google_googletest//:gtest_main",
            "substitute * //testing/base/public:gunit_for_library_testonly @com_google_googletest//:gtest",
            # Protobuf substitutions
            "substitute * //net/proto2/python/public$ @com_google_protobuf//:protobuf_python",
            "substitute * //net/proto2/python/public:(.*) @com_google_protobuf//:protobuf_python",
            "substitute * //net/proto2/proto:descriptor_py_pb2 @com_google_protobuf//:protobuf_python",
            "substitute * //google/protobuf:(.*)_py_pb2 @com_google_protobuf//:protobuf_python",
            "substitute * //google/protobuf:duration_cc_proto @com_google_protobuf//:protobuf",
            "substitute * //google/protobuf:(.*) @com_google_protobuf//:${1}_proto",
            "substitute * //net/proto2/io/public:io @com_google_protobuf//:protobuf",
            "substitute * //net/proto2/proto:descriptor$ @com_google_protobuf//:descriptor_proto",
            "substitute * //net/proto2/proto:descriptor_cc_proto @com_google_protobuf//:protobuf",
            "substitute * //net/proto2/public$ @com_google_protobuf//:protobuf",
            "substitute * //net/proto2/public:(.*) @com_google_protobuf//:protobuf",
            "substitute * //net/proto2/io/public:(.*) @com_google_protobuf//:protobuf",
            "substitute * //net/proto2/util/public:(.*) @com_google_protobuf//:protobuf",
            # GRPC substitions
            "substitute * //net/grpc$ @com_github_grpc_grpc//:grpc",
            "substitute * //third_party/grpc:(.*) @com_github_grpc_grpc//:grpc",
            "substitute * //net/grpc:(.*) @com_github_grpc_grpc//:${1}",
            # Re2
            "replace deps //third_party/re2 @com_googlesource_code_re2//:re2",
            # Ecclesia
            "substitute * //third_party/ecclesia/(.*) @com_google_ecclesia//ecclesia/${1}",
            "fix unusedLoads",
        ],
    ),

    # Abseil flag stuff
    core.replace(
        before = "InitGoogleExceptChangeRootAndUser(${args})",
        after = "absl::ParseCommandLine(argc, argv)",
        regex_groups = {"args": ".*"},
        paths = glob(cc_files),
    ),
    core.replace(
        before = "#include \"base/init_google.h\"",
        after = "#include \"absl/flags/parse.h\"",
        paths = glob(cc_files),
    ),

    # Fix protobuf PackFrom inconsistency - it's void return externally
    # unless we use the latest release candidate.
    core.replace(
        before = "if (!${proto}->PackFrom(${param}))",
        after = "${proto}->PackFrom(${param});\nif (false)",
        paths = glob(cc_files),
        regex_groups = {
            "proto": ".*?",
            "param": ".*?",
        },
    ),

    # Transform the proto2 namespace to google::protobuf.
    core.replace(
        before = "${pre}proto2::",
        after = "${pre}google::protobuf::",
        regex_groups = {"pre": "\\b"},
        paths = glob(cc_files),
    ),
    # Change proto gencode references.
    core.replace(
        before = ".proto.h\"",
        after = ".pb.h\"",
        paths = glob(cc_files),
    ),
    core.replace(
        before = "//third_party/ocpdiag/bazel",
        after = "//ocpdiag",
        paths = glob(bazel_files),
    ),
    core.replace(
        before = "//devtools/python/blaze:${rule}",
        after = "//ocpdiag:python.bzl",
        paths = glob(bazel_files),
        regex_groups = {
            "rule": ".+bzl",
        },
    ),
    simple_path_replace(
        "//third_party/ocpdiag/core/params:ocpdiag_launcher",
        "//ocpdiag/core/params:ocpdiag_launcher",
        bazel_files,
    ),
    simple_path_replace(
        "_OCPDIAG_WORKSPACE = \"google3\"",
        "_OCPDIAG_WORKSPACE = \"ocpdiag\"",
        bazel_files,
    ),
]

core_replace_transformations = [

    # Move pybind libs from deps to data.
    buildozer.modify(
        target = "ocpdiag/core/results/python:results",
        commands = [
            "remove deps :_results",
            "add data :_results.so",
        ],
    ),
    buildozer.modify(
        target = "ocpdiag/core/hwinterface/backends/fake/python:fake_backend",
        commands = [
            "remove deps :_fake_backend",
            "add data :_fake_backend.so",
        ],
    ),
    buildozer.modify(
        target = "ocpdiag/core/results/python:output_model",
        commands = [
            "remove deps :_output_model",
            "add data :_output_model.so",
        ],
    ),
    buildozer.modify(
        target = "ocpdiag/core/results/python:output_receiver",
        commands = [
            "remove deps :_output_receiver",
            "add data :_output_receiver.so",
        ],
    ),
    buildozer.modify(
        target = "third_party/pybind11_abseil:status",
        commands = [
            "remove deps //third_party/pybind11_abseil:status",
            "add data @pybind11_abseil//pybind11_abseil:status.so",
        ],
    ),

    # Go support is not in scope
    remove_build_rule_type("go_library"),
    remove_build_rule_type("go_binary"),
    remove_build_rule_type("go_proto_library"),
    remove_build_rule_type("go_test"),
]

# Non-github rules.
gob_replace_transformations = [
    core.replace(
        before = "${ldap}",
        after = "ocpdiag-core-team@google.com",
        regex_groups = {
            "ldap": "[\\w]*@google.com",
        },
        multiline = True,
    ),

    # gsys is not in core OCPDiag
    simple_path_replace("third_party/grpc/include/", "", cc_files),
    simple_path_replace("platforms/gsys/", "ocpdiag/core/hwinterface/backends/gsys/lib/", cc_files),
    simple_path_replace("ocpdiag_gsys", "platforms_gsys", proto_files),
    simple_path_replace("ocpdiag_storage", "platforms_storage", proto_files),
    simple_path_replace("machine::config", "platforms_gsys", cc_files),
    simple_path_replace("platforms_direct_io", "ocpdiag_direct_io", cc_files),
    simple_path_replace("grpc::GsysService", "GsysService", cc_files),
    simple_path_replace("grpc::MockGsysServiceStub", "MockGsysServiceStub", cc_files),
    simple_path_replace("from google3.platforms.gsys.proto", "from ocpdiag.core.hwinterface.backends.gsys.lib.proto", python_files),

    # python gsys libraries not for open-sourcing
    remove_build_rule("ocpdiag/core/testing/gsysutils:gsys_rpc"),
    remove_build_rule("ocpdiag/core/testing/gsysutils:gsys_rpc_test"),
    core.replace(
        before = "#include \"third_party/re2/re2.h\"",
        after = "#include \"re2/re2.h\"",
        paths = glob(cc_files),
    ),
    core.replace(
        "load(\"//tools/build_defs/proto/cpp:cc_proto_library.bzl\", \"cc_proto_library\")",
        "",
        paths = glob(["**BUILD"]),
    ),
    core.replace(
        before = "#include \"third_party/ecclesia",
        after = "#include \"ecclesia",
        paths = glob(cc_files),
    ),
    core.replace(
        before = "absl::GetFlag(FLAGS_test_tmpdir)",
        after = "getenv(\"TEST_TMPDIR\")",
        paths = glob([
            "**/*.cc",
            "**/*.h",
        ]),
    ),

    # Replace Abseil VLOG with LOG
    core.replace(
        before = "VLOG(${verbose})",
        after = "LOG(INFO)",
        regex_groups = {
            "verbose": "\\d+",
        },
        paths = glob(cc_files),
    ),

    #
    remove_build_rule("ocpdiag/diagnostics/system/error_monitor:cpu_error_step_test"),
    remove_build_rule("ocpdiag/diagnostics/system/error_monitor:error_monitor_test"),
    remove_build_rule("ocpdiag/diagnostics/system/error_monitor:memory_controller_error_step_test"),
    remove_build_rule("ocpdiag/diagnostics/system/error_monitor:pcie_error_step_test"),
    remove_build_rule("ocpdiag/diagnostics/system/error_monitor/pcie_errors:pcie_error_step_test"),
    remove_build_rule("ocpdiag/diagnostics/system/error_monitor:pmbus_error_step_test"),
    buildozer.modify(
        target = "ocpdiag/core/hwinterface/client/python:service_client",
        commands = [
            "remove deps :_service_client",
            "add data :_service_client.so",
        ],
    ),
    buildozer.modify(
        target = "ocpdiag/core/hwinterface/client/python:_service_client",
        commands = [
            "add data //ocpdiag/core/hwinterface/backends/lib/python:_host_adapter.so",
        ],
    ),
    buildozer.modify(
        target = "ocpdiag/core/hwinterface/backends/lib/python:host_adapter",
        commands = [
            "remove deps :_host_adapter",
            "add data :_host_adapter.so",
        ],
    ),
    buildozer.modify(
        target = "ocpdiag/core/hwinterface/lib/python:identifier_utils",
        commands = [
            "remove deps :_identifier_utils",
            "add data :_identifier_utils.so",
        ],
    ),
    buildozer.modify(
        target = "ocpdiag/core/params/python:fake_params",
        commands = [
            "remove deps :_fake_params",
            "add data :_fake_params.so",
        ],
    ),
    buildozer.modify(
        target = "ocpdiag/diagnostics/lib/test_harness/python:test_harness",
        commands = [
            "remove deps :_test_harness",
            "add data :_test_harness.so",
        ],
    ),
    buildozer.modify(
        target = "ocpdiag/diagnostics/lib/test_harness/python:_test_harness",
        commands = [
            "add data //ocpdiag/core/hwinterface/client/python:_service_client.so",
            "add data //ocpdiag/core/results/python:_results.so",
        ],
    ),
]

diags_replace_transformations = [
    core.replace(
        before = "ocpdiag/diagnostics",
        after = "diagnostics",
        paths = glob(cc_files + bazel_files),
    ),
    buildozer.modify(
        target = "...:*",
        commands = [
            "substitute * //ocpdiag/(.*) @ocpdiag//ocpdiag/${1}",
            "substitute_load //ocpdiag/core:ocpdiag.bzl @ocpdiag//ocpdiag/core:ocpdiag.bzl",
        ],
    ),
    core.replace(
        before = "#include \"third_party/ecclesia",
        after = "#include \"ecclesia",
        paths = glob(cc_files),
    ),
    remove_build_rule("diagnostics/system/error_monitor:cpu_error_step_test"),
    remove_build_rule("diagnostics/system/error_monitor:error_monitor_test"),
    remove_build_rule("diagnostics/system/error_monitor:memory_controller_error_step_test"),
    remove_build_rule("diagnostics/system/error_monitor:pcie_error_step_test"),
    remove_build_rule("diagnostics/system/error_monitor/pcie_errors:pcie_error_step_test"),
    remove_build_rule("diagnostics/system/error_monitor:pmbus_error_step_test"),
    remove_build_rule("diagnostics/lib/hardware_identifier:hardware_identifier"),
    remove_build_rule("diagnostics/lib/hardware_identifier/python:hardware_identifier"),
    core.replace(
        "load(\"//tools/build_defs/proto/cpp:cc_proto_library.bzl\", \"cc_proto_library\")",
        "",
        paths = glob(["**BUILD"]),
    ),
]

# Transformation to remove the OCPDiag code name when exporting to Github
anti_ocpdiag_move_transformations = [
    core.move(
        before = "${prefix}ocpdiag${suffix}",
        after = "${prefix}ocpdiag${suffix}",
        regex_groups = {
            "prefix": ".*?",
            "suffix": ".*?",
        },
    ),
    # Some times ocpdiag shows up twice in a file path.
    core.move(
        before = "${prefix}ocpdiag${suffix}",
        after = "${prefix}ocpdiag${suffix}",
        regex_groups = {
            "prefix": ".*?",
            "suffix": ".*?",
        },
    ),
    # Add empty build files to partially released hwinterface libraries
    create_empty_build_file("ocpdiag/core/hwinterface/BUILD"),
    create_empty_build_file("ocpdiag/core/hwinterface/lib/BUILD"),
    # Move non top level files into the apis folder
    core.move(
        before = "",
        after = "apis/ocpdiag",
        paths = github_api_files,
    ),
]

anti_ocpdiag_replace_transformations = [
    core.replace(
        before = "ocpdiag",
        after = "ocpdiag",
    ),
    core.replace(
        before = "OCPDiag",
        after = "OCPDiag",
    ),
    core.replace(
        before = "OCPDIAG",
        after = "OCPDIAG",
    ),
]

all_replace_transformations = common_g3doc_replace_transformations + \
                              gob_replace_transformations + \
                              common_replace_transformations + \
                              core_replace_transformations

MIT_HEADER = """\
{opening_comment}{comment} Copyright 2022 Google LLC
{comment}
{comment} Use of this source code is governed by an MIT-style
{comment} license that can be found in the LICENSE file or at
{comment} https://opensource.org/licenses/MIT.{closing_comment}

"""

def add_mit_header(
        paths,
        comment_chars = "#",
        comment_chars_opening = "",
        comment_chars_closing = ""):
    return core.replace(
        before = "",
        after = MIT_HEADER.format(
            comment = comment_chars,
            opening_comment = comment_chars_opening,
            closing_comment = comment_chars_closing,
        ),
        paths = paths,
        first_only = True,
        multiline = True,
    )

def verify_mit_header(paths):
    return core.verify_match(
        regex = "Use of this source code is governed by an MIT-style",
        paths = paths,
    )

license_transformations = [
    add_mit_header(
        paths = glob(python_files + bazel_files),
    ),
    add_mit_header(
        comment_chars = "//",
        paths = glob(cc_files + proto_files),
    ),
    verify_mit_header(paths = glob(cc_files + python_files + bazel_files + proto_files)),
]

common_gob_transformations = core_doc_move_transformations + core_move_transformations + \
                             gob_move_transformations + all_replace_transformations + \
                             license_transformations + [format.buildifier()] + scrubbers()
all_gob_files = gob_files_to_move + gob_readme_files + gob_diag_files_to_move

all_github_transformations = core_doc_move_transformations + \
                             core_move_transformations + core_replace_transformations + \
                             common_replace_transformations + \
                             github_g3doc_replace_transformations + \
                             common_g3doc_replace_transformations + [format.buildifier()] + \
                             license_transformations + scrubbers() + \
                             anti_ocpdiag_move_transformations + \
                             anti_ocpdiag_replace_transformations
all_github_files = github_files_to_move + core_readme_files

all_diags_files = diags_files_to_move + shared_source_g3doc_files
all_diags_transformations = diags_move_transformations + common_replace_transformations + diags_replace_transformations + \
                            license_transformations + scrubbers() + anti_ocpdiag_replace_transformations + [format.buildifier()]

def leakr_check():
    """leakr check.

    Use ovss default dict, and override rules by //third_party/ocpdiag/leakr.dict
    """
    dict_paths = [
        "//platforms/servers/optionality/ovss_code_confidentiality/generated/default.dict",
        "//third_party/ocpdiag/leakr.dict",
    ]
    return leakr.check(
        dictionary = dict_paths,
        badfile_dictionary = dict_paths,
    )

# Workflow for applying the copybara transformations to a local source folder.
# Useful for manually constructing a copy of the repo for testing.
# See g3doc on Git-on-Borg for example invocation.
core.workflow(
    name = "test_gob_workflow_to_local_folder",
    origin = folder.origin(),
    origin_files = all_gob_files,
    destination = folder.destination(),
    destination_files = glob(["**"]),
    mode = "SQUASH",
    authoring = authoring.overwrite("OCPDiag Team <no-reply@google.com>"),
    transformations = common_gob_transformations + [leakr_check()],
)

core.workflow(
    name = "test_github_workflow_to_local_folder",
    origin = folder.origin(),
    origin_files = all_github_files,
    destination = folder.destination(),
    destination_files = glob(["**"]),
    mode = "SQUASH",
    authoring = authoring.overwrite("OCPDiag Team <no-reply@google.com>"),
    transformations = all_github_transformations,
)

core.workflow(
    name = "test_diags_only_workflow_to_local_folder",
    origin = folder.origin(),
    origin_files = all_diags_files,
    destination = folder.destination(),
    destination_files = glob(["**"]),
    mode = "SQUASH",
    authoring = authoring.overwrite("OCPDiag Team <no-reply@google.com>"),
    transformations = all_diags_transformations,
)

piper_sot_to_gerrit(
    google3_files = all_gob_files,
    default_author = default_author,
    allowed_authors = allowed_authors,
    contact_email = "ocpdiag-core-team+copybara@google.com",
    url = "rpc://ocpdiag/ocpdiag",
    branch = "main",
    transformations = common_gob_transformations,
    owner_mdb = "ocpdiag-admin",
    metadata_scrubber = message_keep_tag_text(msg_if_no_match = "Internal change"),
    leakr_check = leakr_check(),
    ci_labels = ["Kokoro"],
)

piper_sot_to_github(
    google3_files = all_github_files,
    git_files = github_files,
    default_author = default_author,
    allowed_authors = allowed_authors,
    contact_email = "ocpdiag-core-team+copybara@google.com",
    url = "https://github.com/opencomputeproject/ocp-diag-core",
    branch = "main",
    github_use_app = True,
    transformations = all_github_transformations,
    owner_mdb = "ocpdiag-admin",
    metadata_scrubber = message_keep_tag_text(msg_if_no_match = "Internal change"),
    leakr_check = leakr_check(),
)
